/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TestSerialMsg'
 * message type.
 */

public class TestSerialMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 28;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 137;

    /** Create a new TestSerialMsg of size 28. */
    public TestSerialMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TestSerialMsg of the given data_length. */
    public TestSerialMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg with the given data_length
     * and base offset.
     */
    public TestSerialMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store.
     */
    public TestSerialMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TestSerialMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TestSerialMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg embedded in the given message
     * at the given base offset.
     */
    public TestSerialMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg embedded in the given message
     * at the given base offset and length.
     */
    public TestSerialMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TestSerialMsg> \n";
      try {
        s += "  [myaddress=0x"+Long.toHexString(get_myaddress())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [motheraddress=0x"+Long.toHexString(get_motheraddress())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [framelenghth=0x"+Long.toHexString(get_framelenghth())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [length=0x"+Long.toHexString(get_length())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [a=";
        for (int i = 0; i < 22; i++) {
          s += "0x"+Long.toHexString(getElement_a(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: myaddress
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'myaddress' is signed (false).
     */
    public static boolean isSigned_myaddress() {
        return false;
    }

    /**
     * Return whether the field 'myaddress' is an array (false).
     */
    public static boolean isArray_myaddress() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'myaddress'
     */
    public static int offset_myaddress() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'myaddress'
     */
    public static int offsetBits_myaddress() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'myaddress'
     */
    public int get_myaddress() {
        return (int)getUIntElement(offsetBits_myaddress(), 16);
    }

    /**
     * Set the value of the field 'myaddress'
     */
    public void set_myaddress(int value) {
        setUIntElement(offsetBits_myaddress(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'myaddress'
     */
    public static int size_myaddress() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'myaddress'
     */
    public static int sizeBits_myaddress() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: motheraddress
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'motheraddress' is signed (false).
     */
    public static boolean isSigned_motheraddress() {
        return false;
    }

    /**
     * Return whether the field 'motheraddress' is an array (false).
     */
    public static boolean isArray_motheraddress() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'motheraddress'
     */
    public static int offset_motheraddress() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'motheraddress'
     */
    public static int offsetBits_motheraddress() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'motheraddress'
     */
    public int get_motheraddress() {
        return (int)getUIntElement(offsetBits_motheraddress(), 16);
    }

    /**
     * Set the value of the field 'motheraddress'
     */
    public void set_motheraddress(int value) {
        setUIntElement(offsetBits_motheraddress(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'motheraddress'
     */
    public static int size_motheraddress() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'motheraddress'
     */
    public static int sizeBits_motheraddress() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: framelenghth
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'framelenghth' is signed (false).
     */
    public static boolean isSigned_framelenghth() {
        return false;
    }

    /**
     * Return whether the field 'framelenghth' is an array (false).
     */
    public static boolean isArray_framelenghth() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'framelenghth'
     */
    public static int offset_framelenghth() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'framelenghth'
     */
    public static int offsetBits_framelenghth() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'framelenghth'
     */
    public short get_framelenghth() {
        return (short)getUIntElement(offsetBits_framelenghth(), 8);
    }

    /**
     * Set the value of the field 'framelenghth'
     */
    public void set_framelenghth(short value) {
        setUIntElement(offsetBits_framelenghth(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'framelenghth'
     */
    public static int size_framelenghth() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'framelenghth'
     */
    public static int sizeBits_framelenghth() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: length
    //   Field type: short, unsigned
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'length' is signed (false).
     */
    public static boolean isSigned_length() {
        return false;
    }

    /**
     * Return whether the field 'length' is an array (false).
     */
    public static boolean isArray_length() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'length'
     */
    public static int offset_length() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'length'
     */
    public static int offsetBits_length() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'length'
     */
    public short get_length() {
        return (short)getUIntElement(offsetBits_length(), 8);
    }

    /**
     * Set the value of the field 'length'
     */
    public void set_length(short value) {
        setUIntElement(offsetBits_length(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'length'
     */
    public static int size_length() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'length'
     */
    public static int sizeBits_length() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: a
    //   Field type: short[], unsigned
    //   Offset (bits): 48
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'a' is signed (false).
     */
    public static boolean isSigned_a() {
        return false;
    }

    /**
     * Return whether the field 'a' is an array (true).
     */
    public static boolean isArray_a() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'a'
     */
    public static int offset_a(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 22) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'a'
     */
    public static int offsetBits_a(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 22) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'a' as a short[]
     */
    public short[] get_a() {
        short[] tmp = new short[22];
        for (int index0 = 0; index0 < numElements_a(0); index0++) {
            tmp[index0] = getElement_a(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'a' from the given short[]
     */
    public void set_a(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_a(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'a'
     */
    public short getElement_a(int index1) {
        return (short)getUIntElement(offsetBits_a(index1), 8);
    }

    /**
     * Set an element of the array 'a'
     */
    public void setElement_a(int index1, short value) {
        setUIntElement(offsetBits_a(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'a'
     */
    public static int totalSize_a() {
        return (176 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'a'
     */
    public static int totalSizeBits_a() {
        return 176;
    }

    /**
     * Return the size, in bytes, of each element of the array 'a'
     */
    public static int elementSize_a() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'a'
     */
    public static int elementSizeBits_a() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'a'
     */
    public static int numDimensions_a() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'a'
     */
    public static int numElements_a() {
        return 22;
    }

    /**
     * Return the number of elements in the array 'a'
     * for the given dimension.
     */
    public static int numElements_a(int dimension) {
      int array_dims[] = { 22,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'a' with a String
     */
    public void setString_a(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_a(i, (short)s.charAt(i));
         }
         setElement_a(i, (short)0); //null terminate
    }

    /**
     * Read the array 'a' as a String
     */
    public String getString_a() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,22)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_a(i) == (char)0) break;
             carr[i] = (char)getElement_a(i);
         }
         return new String(carr,0,i);
    }

}
