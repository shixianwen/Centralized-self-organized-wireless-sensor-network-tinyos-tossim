#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'TestSerialMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 28

# The Active Message type associated with this message.
AM_TYPE = 137

class TestSerialMsg(tinyos.message.Message.Message):
    # Create a new TestSerialMsg of size 28.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=28):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <TestSerialMsg> \n"
        try:
            s += "  [myaddress=0x%x]\n" % (self.get_myaddress())
        except:
            pass
        try:
            s += "  [motheraddress=0x%x]\n" % (self.get_motheraddress())
        except:
            pass
        try:
            s += "  [tdma_start_time=0x%x]\n" % (self.get_tdma_start_time())
        except:
            pass
        try:
            s += "  [framelenghth=0x%x]\n" % (self.get_framelenghth())
        except:
            pass
        try:
            s += "  [length=0x%x]\n" % (self.get_length())
        except:
            pass
        try:
            s += "  [a=";
            for i in range(0, 8):
                s += "0x%x " % (self.getElement_a(i) & 0xffff)
            s += "]\n";
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: myaddress
    #   Field type: int, unsigned
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'myaddress' is signed (False).
    #
    def isSigned_myaddress(self):
        return False
    
    #
    # Return whether the field 'myaddress' is an array (False).
    #
    def isArray_myaddress(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'myaddress'
    #
    def offset_myaddress(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'myaddress'
    #
    def offsetBits_myaddress(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'myaddress'
    #
    def get_myaddress(self):
        return self.getUIntElement(self.offsetBits_myaddress(), 16, 0)
    
    #
    # Set the value of the field 'myaddress'
    #
    def set_myaddress(self, value):
        self.setUIntElement(self.offsetBits_myaddress(), 16, value, 0)
    
    #
    # Return the size, in bytes, of the field 'myaddress'
    #
    def size_myaddress(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'myaddress'
    #
    def sizeBits_myaddress(self):
        return 16
    
    #
    # Accessor methods for field: motheraddress
    #   Field type: int, unsigned
    #   Offset (bits): 16
    #   Size (bits): 16
    #

    #
    # Return whether the field 'motheraddress' is signed (False).
    #
    def isSigned_motheraddress(self):
        return False
    
    #
    # Return whether the field 'motheraddress' is an array (False).
    #
    def isArray_motheraddress(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'motheraddress'
    #
    def offset_motheraddress(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'motheraddress'
    #
    def offsetBits_motheraddress(self):
        return 16
    
    #
    # Return the value (as a int) of the field 'motheraddress'
    #
    def get_motheraddress(self):
        return self.getUIntElement(self.offsetBits_motheraddress(), 16, 0)
    
    #
    # Set the value of the field 'motheraddress'
    #
    def set_motheraddress(self, value):
        self.setUIntElement(self.offsetBits_motheraddress(), 16, value, 0)
    
    #
    # Return the size, in bytes, of the field 'motheraddress'
    #
    def size_motheraddress(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'motheraddress'
    #
    def sizeBits_motheraddress(self):
        return 16
    
    #
    # Accessor methods for field: tdma_start_time
    #   Field type: long, unsigned
    #   Offset (bits): 32
    #   Size (bits): 32
    #

    #
    # Return whether the field 'tdma_start_time' is signed (False).
    #
    def isSigned_tdma_start_time(self):
        return False
    
    #
    # Return whether the field 'tdma_start_time' is an array (False).
    #
    def isArray_tdma_start_time(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'tdma_start_time'
    #
    def offset_tdma_start_time(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'tdma_start_time'
    #
    def offsetBits_tdma_start_time(self):
        return 32
    
    #
    # Return the value (as a long) of the field 'tdma_start_time'
    #
    def get_tdma_start_time(self):
        return self.getUIntElement(self.offsetBits_tdma_start_time(), 32, 0)
    
    #
    # Set the value of the field 'tdma_start_time'
    #
    def set_tdma_start_time(self, value):
        self.setUIntElement(self.offsetBits_tdma_start_time(), 32, value, 0)
    
    #
    # Return the size, in bytes, of the field 'tdma_start_time'
    #
    def size_tdma_start_time(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'tdma_start_time'
    #
    def sizeBits_tdma_start_time(self):
        return 32
    
    #
    # Accessor methods for field: framelenghth
    #   Field type: int, unsigned
    #   Offset (bits): 64
    #   Size (bits): 16
    #

    #
    # Return whether the field 'framelenghth' is signed (False).
    #
    def isSigned_framelenghth(self):
        return False
    
    #
    # Return whether the field 'framelenghth' is an array (False).
    #
    def isArray_framelenghth(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'framelenghth'
    #
    def offset_framelenghth(self):
        return (64 / 8)
    
    #
    # Return the offset (in bits) of the field 'framelenghth'
    #
    def offsetBits_framelenghth(self):
        return 64
    
    #
    # Return the value (as a int) of the field 'framelenghth'
    #
    def get_framelenghth(self):
        return self.getUIntElement(self.offsetBits_framelenghth(), 16, 0)
    
    #
    # Set the value of the field 'framelenghth'
    #
    def set_framelenghth(self, value):
        self.setUIntElement(self.offsetBits_framelenghth(), 16, value, 0)
    
    #
    # Return the size, in bytes, of the field 'framelenghth'
    #
    def size_framelenghth(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'framelenghth'
    #
    def sizeBits_framelenghth(self):
        return 16
    
    #
    # Accessor methods for field: length
    #   Field type: short, unsigned
    #   Offset (bits): 80
    #   Size (bits): 8
    #

    #
    # Return whether the field 'length' is signed (False).
    #
    def isSigned_length(self):
        return False
    
    #
    # Return whether the field 'length' is an array (False).
    #
    def isArray_length(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'length'
    #
    def offset_length(self):
        return (80 / 8)
    
    #
    # Return the offset (in bits) of the field 'length'
    #
    def offsetBits_length(self):
        return 80
    
    #
    # Return the value (as a short) of the field 'length'
    #
    def get_length(self):
        return self.getUIntElement(self.offsetBits_length(), 8, 0)
    
    #
    # Set the value of the field 'length'
    #
    def set_length(self, value):
        self.setUIntElement(self.offsetBits_length(), 8, value, 0)
    
    #
    # Return the size, in bytes, of the field 'length'
    #
    def size_length(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'length'
    #
    def sizeBits_length(self):
        return 8
    
    #
    # Accessor methods for field: a
    #   Field type: int[], unsigned
    #   Offset (bits): 96
    #   Size of each element (bits): 16
    #

    #
    # Return whether the field 'a' is signed (False).
    #
    def isSigned_a(self):
        return False
    
    #
    # Return whether the field 'a' is an array (True).
    #
    def isArray_a(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'a'
    #
    def offset_a(self, index1):
        offset = 96
        if index1 < 0 or index1 >= 8:
            raise IndexError
        offset += 0 + index1 * 16
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'a'
    #
    def offsetBits_a(self, index1):
        offset = 96
        if index1 < 0 or index1 >= 8:
            raise IndexError
        offset += 0 + index1 * 16
        return offset
    
    #
    # Return the entire array 'a' as a int[]
    #
    def get_a(self):
        tmp = [None]*8
        for index0 in range (0, self.numElements_a(0)):
                tmp[index0] = self.getElement_a(index0)
        return tmp
    
    #
    # Set the contents of the array 'a' from the given int[]
    #
    def set_a(self, value):
        for index0 in range(0, len(value)):
            self.setElement_a(index0, value[index0])

    #
    # Return an element (as a int) of the array 'a'
    #
    def getElement_a(self, index1):
        return self.getUIntElement(self.offsetBits_a(index1), 16, 0)
    
    #
    # Set an element of the array 'a'
    #
    def setElement_a(self, index1, value):
        self.setUIntElement(self.offsetBits_a(index1), 16, value, 0)
    
    #
    # Return the total size, in bytes, of the array 'a'
    #
    def totalSize_a(self):
        return (128 / 8)
    
    #
    # Return the total size, in bits, of the array 'a'
    #
    def totalSizeBits_a(self):
        return 128
    
    #
    # Return the size, in bytes, of each element of the array 'a'
    #
    def elementSize_a(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'a'
    #
    def elementSizeBits_a(self):
        return 16
    
    #
    # Return the number of dimensions in the array 'a'
    #
    def numDimensions_a(self):
        return 1
    
    #
    # Return the number of elements in the array 'a'
    #
    def numElements_a():
        return 8
    
    #
    # Return the number of elements in the array 'a'
    # for the given dimension.
    #
    def numElements_a(self, dimension):
        array_dims = [ 8,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
