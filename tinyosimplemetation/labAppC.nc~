#include "LinkEstimator.h"
#include "Lab.h"
#include "TestSerial.h"
configuration labAppC {}
implementation {
	enum {BEACON_MSG = 10,
	      QUALITY_MSG = 11,
	      RELAY_MSG =12,//testserial之后的往下发信息的
	      TEST_MSG = 13,//最后用来往上发信息的，和往下发信息的testserial区分开
		};
	components MainC, labC;
	components LinkEstimatorP as Estimator;
	components new AMSenderC(BEACON_MSG) as SendControl;
	components new AMReceiverC(BEACON_MSG) as ReceiveControl;
	components new AMSenderC(QUALITY_MSG) as QualitySend;
	components new AMReceiverC(QUALITY_MSG) as QualityRecieve;
	components new AMSenderC(TEST_MSG) as FinalTestSend;
	components new AMReceiverC(TEST_MSG) as FinalTestRecieve;
	//components new TimerMilliC() as BeaconTimer;
	components new TimerMilliC() as QualityTimer;
	components new TimerMilliC() as FowarderTimer;
	components new TimerMilliC() as RadioTimer;
	components new TimerMilliC() as DelayTimer;
	components new TimerMilliC() as Quality_send_retransmit_csma;
	components new TimerMilliC() as Quality_forward_retransmit_csma;
	//components new TimerMilliC() as ScheduleTimer;
	components RandomC;
	components ActiveMessageC;
	components new PoolC(message_forward_t, 60) as MessageSendPool;
	components new PoolC(message_t, 10) as MessageRecievePool;
	components new QueueC(message_forward_t*, 60) as SendQueue;
	components SerialActiveMessageC as AMserial;
	components new AMSenderC(RELAY_MSG) as RelaySend;
	components new AMReceiverC(RELAY_MSG) as RelayReceive;
	components TDMAAppC;  //TDMA Mechanism
	components EASAPAppC; //Extended Adaptive Slot Assignment Protocol
	components SimpleTimeAppC; //Utility for manipulating time

	MainC.SoftwareInit -> Estimator;
	labC.AMPacket -> ActiveMessageC;
	labC.Packet -> QualitySend;
	labC.Boot -> MainC.Boot;
	labC.BeaconSend -> Estimator.Send;
	labC.BeaconReceive -> Estimator.Receive;
        labC.LinkEstimator -> Estimator.LinkEstimator;
	labC.AMControl -> ActiveMessageC;
	//labC.BeaconTimer -> BeaconTimer;
	labC.PacketAcknowledgements -> QualitySend;
	labC.FowarderTimer -> FowarderTimer;
	labC.QualitySend -> QualitySend;
	labC.QualityRecieve->QualityRecieve;
	labC.QualityTimer -> QualityTimer;
	labC.MessageSendPool -> MessageSendPool;
	labC.MessageRecievePool -> MessageRecievePool;
	labC.SendQueue -> SendQueue;
	labC.Random -> RandomC;
	labC.RadioTimer ->RadioTimer;
	labC.Quality_send_retransmit_csma -> Quality_send_retransmit_csma;
	labC.Quality_forward_retransmit_csma -> Quality_forward_retransmit_csma;

	labC.Control -> AMserial;//serial control
	labC.SerialReceive -> AMserial.Receive[AM_TEST_SERIAL_MSG];
	labC.SerialSend -> AMserial.AMSend[AM_TEST_SERIAL_MSG];
	labC.RelaySend ->RelaySend;
	labC.RelayReceive ->RelayReceive;
	
	labC.TDMA -> TDMAAppC;
	labC.EASAP -> EASAPAppC;
	labC.EASAPImp -> EASAPAppC;
	labC.SimpleTime -> SimpleTimeAppC;
	labC.TDMAControl -> ActiveMessageC;
	labC.DelayTimer -> DelayTimer;

	//labC.ScheduleTimer -> ScheduleTimer;
	labC.FinalTestSend->FinalTestSend;
	labC.FinalTestRecieve->FinalTestRecieve;

	



	Estimator.Random -> RandomC;


	Estimator.AMSend -> SendControl;
	Estimator.SubReceive -> ReceiveControl;
	Estimator.SubPacket -> SendControl;
	Estimator.SubAMPacket -> SendControl;
#if defined(CC2420X)
  components CC2420XActiveMessageC as PlatformActiveMessageC;
#elif defined(PLATFORM_TELOSB) || defined(PLATFORM_MICAZ)
#ifndef TOSSIM
  components CC2420ActiveMessageC as PlatformActiveMessageC;
#else
  components DummyActiveMessageP as PlatformActiveMessageC;
#endif
#elif defined (PLATFORM_MICA2) || defined (PLATFORM_MICA2DOT)
  components CC1000ActiveMessageC as PlatformActiveMessageC;
#elif defined(PLATFORM_EYESIFXV1) || defined(PLATFORM_EYESIFXV2)
  components WhiteBitAccessorC as PlatformActiveMessageC;
#elif defined(PLATFORM_IRIS) || defined(PLATFORM_MESHBEAN)
  components RF230ActiveMessageC as PlatformActiveMessageC;
#elif defined(PLATFORM_MESHBEAN900)
  components RF212ActiveMessageC as PlatformActiveMessageC;
#elif defined(PLATFORM_UCMINI)
  components RFA1ActiveMessageC as PlatformActiveMessageC;
#else
  components DummyActiveMessageP as PlatformActiveMessageC;
#endif

  Estimator.LinkPacketMetadata -> PlatformActiveMessageC;
}


